// <auto-generated />
using System;
using BlazorMUD.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlazorMUD.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210731123443_AddAreaRegionDetails")]
    partial class AddAreaRegionDetails
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.ActorTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Article")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LongDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nouns")
                        .HasColumnType("TEXT");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("ActorTemplates");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.InstancedActor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentInstancedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPersistedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentInstancedVehicleId");

                    b.HasIndex("ParentPersistedVehicleId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("InstancedActors");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.PersistedActor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentInstancedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPersistedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentInstancedVehicleId");

                    b.HasIndex("ParentPersistedVehicleId");

                    b.ToTable("PersistedActors");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.PlacedActor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPlacedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentPlacedVehicleId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("PlacedActors");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Area.AreaTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Auth.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Auth.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.InstancedItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentInstancedActorId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentInstancedItemId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentInstancedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("WearFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentInstancedActorId");

                    b.HasIndex("ParentInstancedItemId");

                    b.HasIndex("ParentInstancedVehicleId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("InstancedItems");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.ItemTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("WearFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("ItemTemplates");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.PersistedItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPersistedActorId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPersistedItemId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPersistedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("WearFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentPersistedActorId");

                    b.HasIndex("ParentPersistedItemId");

                    b.HasIndex("ParentPersistedVehicleId");

                    b.HasIndex("TemplateId");

                    b.ToTable("PersistedItems");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.PlacedItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPlacedActorId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPlacedItemId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPlacedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentPlacedActorId");

                    b.HasIndex("ParentPlacedItemId");

                    b.HasIndex("ParentPlacedVehicleId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("PlacedItems");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.InstancedLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DestinationAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAreaId");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("InstancedLinks");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.LinkTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("LinkTemplates");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.PersistedLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DestinationAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAreaId");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("TemplateId");

                    b.ToTable("PersistedLinks");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.PlacedLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DestinationAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAreaId");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("PlacedLinks");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Region.RegionTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("Flags")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.InstancedVehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentInstancedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentInstancedVehicleId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("InstancedVehicles");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.PersistedVehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPersistedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentPersistedVehicleId");

                    b.HasIndex("TemplateId");

                    b.ToTable("PersistedVehicles");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.PlacedVehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPlacedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentPlacedVehicleId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("PlacedVehicles");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.VehicleTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("VehicleTemplates");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.ActorTemplate", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("ActorTemplates")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.InstancedActor", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany("InstancedActors")
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.InstancedVehicle", "ParentInstancedVehicle")
                        .WithMany("InstancedActors")
                        .HasForeignKey("ParentInstancedVehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.PersistedVehicle", "ParentPersistedVehicle")
                        .WithMany("InstancedActors")
                        .HasForeignKey("ParentPersistedVehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("InstancedActors")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Actor.ActorTemplate", "Template")
                        .WithMany("InstancedActors")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentArea");

                    b.Navigation("ParentInstancedVehicle");

                    b.Navigation("ParentPersistedVehicle");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.PersistedActor", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany("PersistedActors")
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.InstancedVehicle", "ParentInstancedVehicle")
                        .WithMany("PersistedActors")
                        .HasForeignKey("ParentInstancedVehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.PersistedVehicle", "ParentPersistedVehicle")
                        .WithMany("PersistedActors")
                        .HasForeignKey("ParentPersistedVehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");

                    b.Navigation("ParentArea");

                    b.Navigation("ParentInstancedVehicle");

                    b.Navigation("ParentPersistedVehicle");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.PlacedActor", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany("PlacedActors")
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.PlacedVehicle", "ParentPlacedVehicle")
                        .WithMany("PlacedActors")
                        .HasForeignKey("ParentPlacedVehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("PlacedActors")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Actor.ActorTemplate", "Template")
                        .WithMany("PlacedActors")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentArea");

                    b.Navigation("ParentPlacedVehicle");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Area.AreaTemplate", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("Areas")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.InstancedItem", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany("InstancedItems")
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Actor.InstancedActor", "ParentInstancedActor")
                        .WithMany("InstancedItems")
                        .HasForeignKey("ParentInstancedActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Item.InstancedItem", "ParentInstancedItem")
                        .WithMany("InstancedItems")
                        .HasForeignKey("ParentInstancedItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.InstancedVehicle", "ParentInstancedVehicle")
                        .WithMany("InstancedItems")
                        .HasForeignKey("ParentInstancedVehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("InstancedItems")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Item.ItemTemplate", "Template")
                        .WithMany("InstancedItems")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentArea");

                    b.Navigation("ParentInstancedActor");

                    b.Navigation("ParentInstancedItem");

                    b.Navigation("ParentInstancedVehicle");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.ItemTemplate", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("ItemTemplates")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.PersistedItem", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany("PersistedItems")
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Actor.PersistedActor", "ParentPersistedActor")
                        .WithMany("PersistedItems")
                        .HasForeignKey("ParentPersistedActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Item.PersistedItem", "ParentPersistedItem")
                        .WithMany("PersistedItems")
                        .HasForeignKey("ParentPersistedItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.PersistedVehicle", "ParentPersistedVehicle")
                        .WithMany("PersistedItems")
                        .HasForeignKey("ParentPersistedVehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Item.ItemTemplate", "Template")
                        .WithMany("PersistedItems")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentArea");

                    b.Navigation("ParentPersistedActor");

                    b.Navigation("ParentPersistedItem");

                    b.Navigation("ParentPersistedVehicle");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.PlacedItem", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany("PlacedItems")
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Actor.PlacedActor", "ParentPlacedActor")
                        .WithMany("PlacedItems")
                        .HasForeignKey("ParentPlacedActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Item.PlacedItem", "ParentPlacedItem")
                        .WithMany("PlacedItems")
                        .HasForeignKey("ParentPlacedItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.PlacedVehicle", "ParentPlacedVehicle")
                        .WithMany("PlacedItems")
                        .HasForeignKey("ParentPlacedVehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("PlacedItems")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Item.ItemTemplate", "Template")
                        .WithMany("PlacedItems")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentArea");

                    b.Navigation("ParentPlacedActor");

                    b.Navigation("ParentPlacedItem");

                    b.Navigation("ParentPlacedVehicle");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.InstancedLink", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "DestinationArea")
                        .WithMany("DestinationInstancedLinks")
                        .HasForeignKey("DestinationAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany("InstancedLinks")
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("InstancedLinks")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Link.LinkTemplate", "Template")
                        .WithMany("InstancedLinks")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationArea");

                    b.Navigation("ParentArea");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.LinkTemplate", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("LinkTemplates")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.PersistedLink", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "DestinationArea")
                        .WithMany("DestinationPersistedLinks")
                        .HasForeignKey("DestinationAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany("PersistedLinks")
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Link.LinkTemplate", "Template")
                        .WithMany("PersistedLinks")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationArea");

                    b.Navigation("ParentArea");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.PlacedLink", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "DestinationArea")
                        .WithMany("DestinationPlacedLinks")
                        .HasForeignKey("DestinationAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany("PlacedLinks")
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("PlacedLinks")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Link.LinkTemplate", "Template")
                        .WithMany("PlacedLinks")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationArea");

                    b.Navigation("ParentArea");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.InstancedVehicle", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany("InstancedVehicles")
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.InstancedVehicle", "ParentInstancedVehicle")
                        .WithMany("InstancedVehicles")
                        .HasForeignKey("ParentInstancedVehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("InstancedVehicles")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.VehicleTemplate", "Template")
                        .WithMany("InstancedVehicles")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentArea");

                    b.Navigation("ParentInstancedVehicle");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.PersistedVehicle", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany("PersistedVehicles")
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.PersistedVehicle", "ParentPersistedVehicle")
                        .WithMany("PersistedVehicles")
                        .HasForeignKey("ParentPersistedVehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.VehicleTemplate", "Template")
                        .WithMany("PersistedVehicles")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("ParentArea");

                    b.Navigation("ParentPersistedVehicle");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.PlacedVehicle", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany("PlacedVehicles")
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.PlacedVehicle", "ParentPlacedVehicle")
                        .WithMany("PlacedVehicles")
                        .HasForeignKey("ParentPlacedVehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("PlacedVehicles")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.VehicleTemplate", "Template")
                        .WithMany("PlacedVehicles")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentArea");

                    b.Navigation("ParentPlacedVehicle");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.VehicleTemplate", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("VehicleTemplates")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.ActorTemplate", b =>
                {
                    b.Navigation("InstancedActors");

                    b.Navigation("PlacedActors");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.InstancedActor", b =>
                {
                    b.Navigation("InstancedItems");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.PersistedActor", b =>
                {
                    b.Navigation("PersistedItems");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.PlacedActor", b =>
                {
                    b.Navigation("PlacedItems");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Area.AreaTemplate", b =>
                {
                    b.Navigation("DestinationInstancedLinks");

                    b.Navigation("DestinationPersistedLinks");

                    b.Navigation("DestinationPlacedLinks");

                    b.Navigation("InstancedActors");

                    b.Navigation("InstancedItems");

                    b.Navigation("InstancedLinks");

                    b.Navigation("InstancedVehicles");

                    b.Navigation("PersistedActors");

                    b.Navigation("PersistedItems");

                    b.Navigation("PersistedLinks");

                    b.Navigation("PersistedVehicles");

                    b.Navigation("PlacedActors");

                    b.Navigation("PlacedItems");

                    b.Navigation("PlacedLinks");

                    b.Navigation("PlacedVehicles");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.InstancedItem", b =>
                {
                    b.Navigation("InstancedItems");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.ItemTemplate", b =>
                {
                    b.Navigation("InstancedItems");

                    b.Navigation("PersistedItems");

                    b.Navigation("PlacedItems");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.PersistedItem", b =>
                {
                    b.Navigation("PersistedItems");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.PlacedItem", b =>
                {
                    b.Navigation("PlacedItems");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.LinkTemplate", b =>
                {
                    b.Navigation("InstancedLinks");

                    b.Navigation("PersistedLinks");

                    b.Navigation("PlacedLinks");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Region.RegionTemplate", b =>
                {
                    b.Navigation("ActorTemplates");

                    b.Navigation("Areas");

                    b.Navigation("InstancedActors");

                    b.Navigation("InstancedItems");

                    b.Navigation("InstancedLinks");

                    b.Navigation("InstancedVehicles");

                    b.Navigation("ItemTemplates");

                    b.Navigation("LinkTemplates");

                    b.Navigation("PlacedActors");

                    b.Navigation("PlacedItems");

                    b.Navigation("PlacedLinks");

                    b.Navigation("PlacedVehicles");

                    b.Navigation("VehicleTemplates");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.InstancedVehicle", b =>
                {
                    b.Navigation("InstancedActors");

                    b.Navigation("InstancedItems");

                    b.Navigation("InstancedVehicles");

                    b.Navigation("PersistedActors");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.PersistedVehicle", b =>
                {
                    b.Navigation("InstancedActors");

                    b.Navigation("PersistedActors");

                    b.Navigation("PersistedItems");

                    b.Navigation("PersistedVehicles");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.PlacedVehicle", b =>
                {
                    b.Navigation("PlacedActors");

                    b.Navigation("PlacedItems");

                    b.Navigation("PlacedVehicles");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.VehicleTemplate", b =>
                {
                    b.Navigation("InstancedVehicles");

                    b.Navigation("PersistedVehicles");

                    b.Navigation("PlacedVehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
