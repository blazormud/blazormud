// <auto-generated />
using System;
using BlazorMUD.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlazorMUD.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210724200234_AddGameObjects")]
    partial class AddGameObjects
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.ActorInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPersistedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentVehicleInstanceId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentPersistedVehicleId");

                    b.HasIndex("ParentVehicleInstanceId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ActorInstances");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.ActorPlacement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentVehiclePlacementId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentVehiclePlacementId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ActorPlacements");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.ActorTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("ActorTemplates");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.PersistedActor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPersistedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentVehicleInstanceId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentPersistedVehicleId");

                    b.HasIndex("ParentVehicleInstanceId");

                    b.ToTable("PersistedActors");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Area.AreaTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Auth.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Auth.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.ItemInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentActorInstanceId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentItemInstanceId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentVehicleInstanceId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("WearFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentActorInstanceId");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentItemInstanceId");

                    b.HasIndex("ParentVehicleInstanceId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ItemInstances");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.ItemPlacement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentActorPlacementId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentItemPlacementId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentVehiclePlacementId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentActorPlacementId");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentItemPlacementId");

                    b.HasIndex("ParentVehiclePlacementId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ItemPlacements");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.ItemTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("WearFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("ItemTemplates");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.PersistedItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPersistedActorId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPersistedItemId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPersistedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("WearFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentPersistedActorId");

                    b.HasIndex("ParentPersistedItemId");

                    b.HasIndex("ParentPersistedVehicleId");

                    b.HasIndex("TemplateId");

                    b.ToTable("PersistedItems");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.LinkInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DestinationAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAreaId");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("LinkInstances");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.LinkPlacement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DestinationAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAreaId");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("LinkPlacements");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.LinkTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("LinkTemplates");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.PersistedLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("DestinationAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAreaId");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("TemplateId");

                    b.ToTable("PersistedLinks");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Region.RegionTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.PersistedVehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentPersistedVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentPersistedVehicleId");

                    b.ToTable("PersistedVehicles");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.VehicleInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentVehicleInstanceId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentVehicleInstanceId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("VehicleInstances");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.VehiclePlacement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentAreaId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ParentVehiclePlacementId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentAreaId");

                    b.HasIndex("ParentVehiclePlacementId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("VehiclePlacements");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.VehicleTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DynamicFlags")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("StaticFlags")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("VehicleTemplates");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.ActorInstance", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaId");

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.PersistedVehicle", "ParentPersistedVehicle")
                        .WithMany()
                        .HasForeignKey("ParentPersistedVehicleId");

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.VehicleInstance", "ParentVehicleInstance")
                        .WithMany()
                        .HasForeignKey("ParentVehicleInstanceId");

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Actor.ActorTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentArea");

                    b.Navigation("ParentPersistedVehicle");

                    b.Navigation("ParentVehicleInstance");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.ActorPlacement", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaId");

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.VehiclePlacement", "ParentVehiclePlacement")
                        .WithMany()
                        .HasForeignKey("ParentVehiclePlacementId");

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Actor.ActorTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentArea");

                    b.Navigation("ParentVehiclePlacement");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.ActorTemplate", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany("ActorTemplates")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Actor.PersistedActor", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaId");

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.PersistedVehicle", "ParentPersistedVehicle")
                        .WithMany()
                        .HasForeignKey("ParentPersistedVehicleId");

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.VehicleInstance", "ParentVehicleInstance")
                        .WithMany()
                        .HasForeignKey("ParentVehicleInstanceId");

                    b.Navigation("Owner");

                    b.Navigation("ParentArea");

                    b.Navigation("ParentPersistedVehicle");

                    b.Navigation("ParentVehicleInstance");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Area.AreaTemplate", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.ItemInstance", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Actor.ActorInstance", "ParentActorInstance")
                        .WithMany()
                        .HasForeignKey("ParentActorInstanceId");

                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaId");

                    b.HasOne("BlazorMUD.Core.Models.Item.ItemInstance", "ParentItemInstance")
                        .WithMany()
                        .HasForeignKey("ParentItemInstanceId");

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.VehicleInstance", "ParentVehicleInstance")
                        .WithMany()
                        .HasForeignKey("ParentVehicleInstanceId");

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Item.ItemTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentActorInstance");

                    b.Navigation("ParentArea");

                    b.Navigation("ParentItemInstance");

                    b.Navigation("ParentVehicleInstance");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.ItemPlacement", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Actor.ActorPlacement", "ParentActorPlacement")
                        .WithMany()
                        .HasForeignKey("ParentActorPlacementId");

                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaId");

                    b.HasOne("BlazorMUD.Core.Models.Item.ItemPlacement", "ParentItemPlacement")
                        .WithMany()
                        .HasForeignKey("ParentItemPlacementId");

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.VehiclePlacement", "ParentVehiclePlacement")
                        .WithMany()
                        .HasForeignKey("ParentVehiclePlacementId");

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Item.ItemTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentActorPlacement");

                    b.Navigation("ParentArea");

                    b.Navigation("ParentItemPlacement");

                    b.Navigation("ParentVehiclePlacement");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.ItemTemplate", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Item.PersistedItem", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaId");

                    b.HasOne("BlazorMUD.Core.Models.Actor.PersistedActor", "ParentPersistedActor")
                        .WithMany()
                        .HasForeignKey("ParentPersistedActorId");

                    b.HasOne("BlazorMUD.Core.Models.Item.PersistedItem", "ParentPersistedItem")
                        .WithMany()
                        .HasForeignKey("ParentPersistedItemId");

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.PersistedVehicle", "ParentPersistedVehicle")
                        .WithMany()
                        .HasForeignKey("ParentPersistedVehicleId");

                    b.HasOne("BlazorMUD.Core.Models.Item.ItemTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentArea");

                    b.Navigation("ParentPersistedActor");

                    b.Navigation("ParentPersistedItem");

                    b.Navigation("ParentPersistedVehicle");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.LinkInstance", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "DestinationArea")
                        .WithMany()
                        .HasForeignKey("DestinationAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Link.LinkTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationArea");

                    b.Navigation("ParentArea");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.LinkPlacement", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "DestinationArea")
                        .WithMany()
                        .HasForeignKey("DestinationAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Link.LinkTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationArea");

                    b.Navigation("ParentArea");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.LinkTemplate", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Link.PersistedLink", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "DestinationArea")
                        .WithMany()
                        .HasForeignKey("DestinationAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Link.LinkTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationArea");

                    b.Navigation("ParentArea");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.PersistedVehicle", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaId");

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.PersistedVehicle", "ParentPersistedVehicle")
                        .WithMany()
                        .HasForeignKey("ParentPersistedVehicleId");

                    b.Navigation("Owner");

                    b.Navigation("ParentArea");

                    b.Navigation("ParentPersistedVehicle");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.VehicleInstance", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaId");

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.VehicleInstance", "ParentVehicleInstance")
                        .WithMany()
                        .HasForeignKey("ParentVehicleInstanceId");

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.VehicleTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentArea");

                    b.Navigation("ParentVehicleInstance");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.VehiclePlacement", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Area.AreaTemplate", "ParentArea")
                        .WithMany()
                        .HasForeignKey("ParentAreaId");

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.VehiclePlacement", "ParentVehiclePlacement")
                        .WithMany()
                        .HasForeignKey("ParentVehiclePlacementId");

                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Vehicle.VehicleTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentArea");

                    b.Navigation("ParentVehiclePlacement");

                    b.Navigation("Region");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Vehicle.VehicleTemplate", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Region.RegionTemplate", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BlazorMUD.Core.Models.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorMUD.Core.Models.Region.RegionTemplate", b =>
                {
                    b.Navigation("ActorTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
